// Mocks generated by Mockito 5.3.0 from annotations
// in graphz/test/weather/data/repositories/weather_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:graphz/core/network/network_info.dart' as _i6;
import 'package:graphz/features/weather/data/datasources/weather_local_datasource.dart'
    as _i5;
import 'package:graphz/features/weather/data/datasources/weather_remote_datasource.dart'
    as _i3;
import 'package:graphz/features/weather/data/models/weather_model_list.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWeatherModelList_0 extends _i1.SmartFake
    implements _i2.WeatherModelList {
  _FakeWeatherModelList_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [WeatherRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRemoteDatasource extends _i1.Mock
    implements _i3.WeatherRemoteDatasource {
  MockWeatherRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.WeatherModelList> getWeeklyWeather() =>
      (super.noSuchMethod(Invocation.method(#getWeeklyWeather, []),
              returnValue: _i4.Future<_i2.WeatherModelList>.value(
                  _FakeWeatherModelList_0(
                      this, Invocation.method(#getWeeklyWeather, []))))
          as _i4.Future<_i2.WeatherModelList>);
  @override
  _i4.Future<_i2.WeatherModelList> getFullYearWeather() =>
      (super.noSuchMethod(Invocation.method(#getFullYearWeather, []),
              returnValue: _i4.Future<_i2.WeatherModelList>.value(
                  _FakeWeatherModelList_0(
                      this, Invocation.method(#getFullYearWeather, []))))
          as _i4.Future<_i2.WeatherModelList>);
}

/// A class which mocks [WeatherLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherLocalDatasource extends _i1.Mock
    implements _i5.WeatherLocalDatasource {
  MockWeatherLocalDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.WeatherModelList> getCachedWeeklyWeather() =>
      (super.noSuchMethod(Invocation.method(#getCachedWeeklyWeather, []),
              returnValue: _i4.Future<_i2.WeatherModelList>.value(
                  _FakeWeatherModelList_0(
                      this, Invocation.method(#getCachedWeeklyWeather, []))))
          as _i4.Future<_i2.WeatherModelList>);
  @override
  _i4.Future<void> cacheWeeklyWeather(_i2.WeatherModelList? weatherToCache) =>
      (super.noSuchMethod(
              Invocation.method(#cacheWeeklyWeather, [weatherToCache]),
              returnValue: _i4.Future<void>.value(),
              returnValueForMissingStub: _i4.Future<void>.value())
          as _i4.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i6.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: _i4.Future<bool>.value(false)) as _i4.Future<bool>);
}
